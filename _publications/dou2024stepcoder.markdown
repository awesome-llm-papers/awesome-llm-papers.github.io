---
layout: publication
title: 'Stepcoder: Improve Code Generation With Reinforcement Learning From Compiler
  Feedback'
authors: Shihan Dou, Yan Liu, Haoxiang Jia, Limao Xiong, Enyu Zhou, Junjie Shan, Caishuang
  Huang, Wei Shen, Xiaoran Fan, Zhiheng Xi, Yuhao Zhou, Tao Ji, Rui Zheng, Qi Zhang,
  Xuanjing Huang, Tao Gui
conference: No Venue
year: 2024
bibkey: dou2024stepcoder
additional_links: [{name: Code, url: 'https://huggingface.co/discussions/paper/65c04ff6c63d6a8d7f2347fb'},
  {name: Paper, url: 'https://arxiv.org/abs/hf2402.01391'}]
tags: ["Reinforcement Learning", "Tools"]
short_authors: Dou et al.
---
The advancement of large language models (LLMs) has significantly propelled the field of code generation. Previous work integrated reinforcement learning (RL) with compiler feedback for exploring the output space of LLMs to enhance code generation quality. However, the lengthy code generated by LLMs in response to complex human requirements makes RL exploration a challenge. Also, since the unit tests may not cover the complicated code, optimizing LLMs by using these unexecuted code snippets is ineffective. To tackle these challenges, we introduce StepCoder, a novel RL framework for code generation, consisting of two main components: CCCS addresses the exploration challenge by breaking the long sequences code generation task into a Curriculum of Code Completion Subtasks, while FGO only optimizes the model by masking the unexecuted code segments to provide Fine-Grained Optimization. In addition, we furthermore construct the APPS+ dataset for RL training, which is manually verified to ensure the correctness of unit tests. Experimental results show that our method improves the ability to explore the output space and outperforms state-of-the-art approaches in corresponding benchmarks.

https://huggingface.co/discussions/paper/65c04ff6c63d6a8d7f2347fb